
================================================================
Repository Structure
================================================================
aoc2024/
  day1/
    day1.py
  day2/
    day2.py
  day3/
    day3.py
  day4/
    day4.py
  utils/
    __init__.py
    utils.py
.gitignore
README.md

================================================================
Repository Files
================================================================

================
File: aoc2024/day1/day1.py
================
from collections import Counter

def star1():
    left, right = [], []

    with open('input.txt') as f:
        data = f.read().splitlines()
        for i in data:
            l, r = i.split()
            # print(l, r)
            left.append(int(l))
            right.append(int(r))

    left.sort()
    right.sort()
    total = 0
    for l, r in zip(left,right):
        total += abs(l - r)
        
    return total
    # print(total)
    
def star2():
    left, right = [], []
    
    with open('input.txt') as f:
        data = f.read().splitlines()
        for i in data:
            l, r = i.split()
            left.append(int(l))
            right.append(int(r))
    
    leftCounter, rightCounter = Counter(left), Counter(right)
    
    total = 0 
    for key, val in leftCounter.items():
        total += key * val * rightCounter[key]
        
    return total
    

if __name__ == '__main__':
    print(star1())
    print(star2())

================
File: aoc2024/day2/day2.py
================
def isSafe(report):
    safe = True
    if report[0] < report[1]:
        for i in range(1, len(report)):
            diff = report[i] - report[i-1]
            if diff > 3 or diff < 1:
                safe = False
                break
    else:
        for i in range(1, len(report)):
            diff = report[i-1] - report[i]
            if diff > 3 or diff < 1:
                safe = False
                break
    return safe

def star1():
    with open('input.txt') as f:
        data = f.read().splitlines()

    data = [list(map(int, x.split())) for x in data]
    total = 0

    for report in data:
        # print(report)
        safe = True
        if report[0] < report[1]:
            for i in range(1, len(report)):
                diff = report[i] - report[i-1]
                if diff > 3 or diff < 1:
                    safe = False
                    break
        else:
            for i in range(1, len(report)):
                diff = report[i-1] - report[i]
                if diff > 3 or diff < 1:
                    safe = False
                    break
        if safe:
            # print('safe')
            total += 1
        
    return total

# 5 2 6 7 8    
# 5 2 6 1 0
def star2():
    with open('input.txt') as f:
        data = f.read().splitlines()

    data = [list(map(int, x.split())) for x in data]
    total = 0
    
    for report in data:
        safe = False
        for i in range(len(report)):
            newReport = report[0:i] + report[i+1:]
            if isSafe(newReport):
                safe = True
                break
        if safe:
            total += 1
            
    return total

    

if __name__ == '__main__':
    print(star1())
    print(star2())

================
File: aoc2024/day3/day3.py
================
import re
# Time to learn regex for the first time 🙃

def star1():
    with open('input.txt') as f:
        data = f.read()
        # print(data)
        pattern = r"mul\((\d{1,3},\d{1,3})\)"
        match = re.findall(pattern, data)
        # print(match)
        total = 0
        for i in match:
            a, b = i.split(',')
            total += int(a) * int(b)
        
    return total

    
def star2():
    with open('input.txt') as f:
        data = f.read()
        
        # split all the do
        split = data.split('do()')
        strings = []
        
        # that the first split at dont
        for i in split:
            split2 = i.split('don\'t()')
            strings.append(split2[0])
        
        pattern = r"mul\((\d{1,3},\d{1,3})\)"
        match = []
        
        # find all the matches
        for i in strings:
            match += re.findall(pattern, i)
        
        # and get total
        total = 0
        for i in match:
            a, b = i.split(',')
            total += int(a) * int(b)
    return total
    

if __name__ == '__main__':
    print(star1())
    print(star2())

================
File: aoc2024/day4/day4.py
================
from utils.utils import grid_rotate

def star1():
    with open('input.txt') as f:
        data = f.read().splitlines()
    total = 0

    for i in range(4):
        
        for i in range(len(data)):
            for j in range(len(data[1]) - 3):
                if data[i][j] == 'X' and data[i][j+1] == 'M' and data[i][j+2] == 'A' and data[i][j+3] == 'S':
                    total += 1
                        
        for i in range(len(data) - 3):
            for j in range(len(data[1])):
                if data[i][j] == 'X' and data[i+1][j] == 'M' and data[i+2][j] == 'A' and data[i+3][j] == 'S':
                    total += 1
                # print(data[i][j])
                
        for i in range(len(data) - 3):
            for j in range(len(data[1]) - 3):
                if data[i][j] == 'X' and data[i+1][j+1] == 'M' and data[i+2][j+2] == 'A' and data[i+3][j+3] == 'S':
                    total += 1
                if data[i][j+3] == 'X' and data[i+1][j+2] == 'M' and data[i+2][j+1] == 'A' and data[i+3][j] == 'S':
                    total += 1    
        data = grid_rotate(data)
    
    
    return total

    
def star2():
    with open('input.txt') as f:
        data = f.read().splitlines()
        
        
    return
    

if __name__ == '__main__':
    print(star1())
    # print(star2())

================
File: aoc2024/utils/__init__.py
================
from .utils import read_input, grid_rotate, grid_get

================
File: aoc2024/utils/utils.py
================
# utils to be used in other days

def read_input(fileName = "input.txt", splitLines = True):
    with open(fileName) as f:
        if splitLines:
            return f.read().splitlines()
        else:
            return f.read()

def grid_rotate(grid, times = 1):
    for _ in range(times):
        grid = list(zip(*grid[::-1]))
    return grid

def grid_get(grid, x, y, default = "."):
    if x < 0 or y < 0:
        return default
    try:
        return grid[y][x]
    except IndexError:
        return default

================
File: .gitignore
================
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/


input.txt
test.txt
test2.txt
boilerplate.py
tempCodeRunnerFile.py
Pipfile

================
File: README.md
================
Advent of Code 2024
https://adventofcode.com/2024/

Day 1: ⭐️⭐️
Day 2: ⭐️⭐️
Day 3: ⭐️⭐️
